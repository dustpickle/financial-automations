"use client"
import { useState } from "react"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Button } from "@/components/ui/button"
import { createSftpAccountAction } from "@/app/admin/sftp/sftp.actions"

export function CreateSftpAccountForm() {
  const [isLoading, setIsLoading] = useState(false)
  const [errorMessage, setErrorMessage] = useState<string | null>(null)
  const [created, setCreated] = useState<{ username: string; password?: string } | null>(null)

  async function onSubmit(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault()
    setErrorMessage(null)
    setIsLoading(true)
    const formEl = e.currentTarget
    const formData = new FormData(e.currentTarget)
    const res = await createSftpAccountAction({
      name: String(formData.get("name") ?? ""),
      username: String(formData.get("username") ?? ""),
      password: String(formData.get("password") ?? ""),
      webhookUrl: String(formData.get("webhookUrl") ?? ""),
    })
    setIsLoading(false)
    if (res.serverError) setErrorMessage(res.serverError)
    else if (res.validationErrors) {
      const errs = Object.values(res.validationErrors as Record<string, { _errors?: string[] }>)
        .flatMap((v) => v?._errors ?? [])
      setErrorMessage(errs.join(", ") || "Validation error")
    } else if (res.data) setCreated({ username: res.data.username, password: res.data.password })
    formEl.reset()
  }

  return (
    <form onSubmit={onSubmit} className="grid gap-4 max-w-xl">
      <div className="grid gap-1.5">
        <Label htmlFor="name">Name</Label>
        <Input id="name" name="name" required />
      </div>
      <div className="grid gap-1.5">
        <Label htmlFor="username">Username</Label>
        <Input id="username" name="username" required />
      </div>
      <div className="grid gap-1.5">
        <Label htmlFor="password">Password (optional, autogenerated if empty)</Label>
        <Input id="password" name="password" type="text" placeholder="leave blank to auto-generate" />
      </div>
      {/* rootDir is auto-created from name */}
      <div className="grid gap-1.5">
        <Label htmlFor="webhookUrl">Webhook URL</Label>
        <Input id="webhookUrl" name="webhookUrl" type="url" required />
      </div>
      {errorMessage && <p className="text-sm text-red-600">{errorMessage}</p>}
      {created && (
        <div className="text-sm">
          Created. Save credentials now:
          <div>username: {created.username}</div>
          {created.password && <div>password: {created.password}</div>}
          <div className="mt-2">
            <a className="underline" href={`/admin/sftp/${created.username}/bundle`}>Download connection bundle</a>
          </div>
        </div>
      )}
      <Button type="submit" disabled={isLoading}>{isLoading ? "Creating..." : "Create"}</Button>
    </form>
  )
}


